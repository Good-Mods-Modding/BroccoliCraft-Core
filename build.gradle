buildscript {
    repositories {
        maven { url = "https://maven.minecraftforge.net" }
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "5.1.+", changing: true
    }
}
// Only edit below this line
plugins {
    id "eclipse"
    id "maven-publish"
}
apply plugin: "net.minecraftforge.gradle"

version = "${version}"
group = "${base_package}.${mod_id}"
archivesBaseName = "${mod_id}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty "java.version"}, JVM: ${System.getProperty "java.vm.version"} (${System.getProperty "java.vendor"}), Arch: ${System.getProperty "os.arch"}"
minecraft {
    mappings channel: "${mappings_channel}", version: "${minecraft_version}"

    runs {
        client {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", "${mod_id}"

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", "${mod_id}"

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            property "forge.enabledGameTestNamespaces", "${mod_id}"

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")

            property "forge.logging.markers", "REGISTRIES"

            property "forge.logging.console.level", "debug"

            args "--mod", "${mod_id}", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")

            mods {
                mod_id {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {

}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [credits: credits, mod_id: mod_id, display_name: display_name, version: version, authors: authors, description: description, website: website, issue_tracker: issue_tracker, licence: licence, forge_version_range: forge_version_range, minecraft_version_range: minecraft_version_range, pack_format: pack_format]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${specification_title}",
                "Specification-Vendor"    : "${authors}",
                "Specification-Version"   : "${specification_version}",
                "Implementation-Title"    : "${implementation_title}",
                "Implementation-Version"  : "${implementation_version}",
                "Implementation-Vendor"   : "${authors}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}
